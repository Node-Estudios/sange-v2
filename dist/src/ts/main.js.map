{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../src/ts/main.ts"],"names":[],"mappings":"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","sourcesContent":["// src/ts/main.ts\n\n// Importar las funciones y tipos (excepto ZigPtr)\nimport {\n    openInput,\n    closeInput,\n    getVideoInfo,\n    transcode,\n    freeString,\n    freeVideoInfo,\n    type OpenResult,       // Importar interfaces de resultado\n    type VideoInfoResult,\n    type TranscodeResult,\n    // No importar ZigPtr\n  } from '@zig/ffmpeg'; // Asegúrate que el nombre del módulo es correcto\n  \n  // Definir un tipo localmente para representar los punteros de Zigar\n  // Ajusta esto según lo que realmente devuelva Zigar (comúnmente { ptr: string } o { ptr: bigint })\n  // Incluimos el hipotético .read() para strings\n  type ZigPointer = {\n      ptr: string | bigint;\n      read?(): string;\n      // Añadir otros campos si Zigar los incluye (como acceso a campos de struct)\n      codecName?: ZigPointer | null; // Para VideoInfoPtr\n      width?: number;\n      height?: number;\n      durationSeconds?: number;\n  };\n  \n  \n  console.log(\"Iniciando operaciones con FFmpeg (via Zig)...\");\n  \n  // Rutas de ejemplo (ajústalas a tu entorno)\n  const inputFilePath = \"/video.mp4\"; // CAMBIAR ESTO\n  const outputFilePath = \"/output.mp4\"; // CAMBIAR ESTO\n  const transcodeOptions = \"-c:v libx264 -crf 28 -c:a aac -b:a 128k\"; // Opciones de ejemplo\n  \n  // Usar el tipo local ZigPointer en lugar de ZigPtr importado\n  let inputCtx: ZigPointer | null = null;\n  let errorMsgPtr: ZigPointer | null = null;\n  let videoInfoPtr: ZigPointer | null = null;\n  \n  try {\n    // 1. Abrir el archivo de entrada\n    const openResult: OpenResult = openInput(inputFilePath);\n    inputCtx = openResult.ctx;\n    errorMsgPtr = openResult.err_msg;\n  \n    if (errorMsgPtr) {\n      const errorMessage = errorMsgPtr.read ? errorMsgPtr.read() : `Error al abrir (mensaje no legible: ${errorMsgPtr.ptr})`;\n      console.error(`Error en openInput: ${errorMessage}`);\n      freeString(errorMsgPtr); // Liberar la memoria del string de error\n      errorMsgPtr = null;\n      process.exit(1);\n    }\n  \n    if (!inputCtx) {\n        console.error(\"Error en openInput: No se devolvió ni contexto ni mensaje de error.\");\n        process.exit(1);\n    }\n  \n    console.log(\"Archivo de entrada abierto con éxito. Contexto:\", inputCtx.ptr);\n  \n  \n    // 2. Obtener información del video\n    const infoResult: VideoInfoResult = getVideoInfo(inputCtx);\n    videoInfoPtr = infoResult.info;\n    errorMsgPtr = infoResult.err_msg;\n  \n    if (errorMsgPtr) {\n        const errorMessage = errorMsgPtr.read ? errorMsgPtr.read() : `Error en getVideoInfo (mensaje no legible: ${errorMsgPtr.ptr})`;\n        console.error(`Error en getVideoInfo: ${errorMessage}`);\n        freeString(errorMsgPtr);\n        errorMsgPtr = null;\n    } else if (videoInfoPtr) {\n        console.log(\"Información del Video obtenida:\");\n        // Acceder a los campos (asumiendo que Zigar los mapea en el objeto puntero)\n        const codecNamePtr = videoInfoPtr.codecName;\n        const codecName = codecNamePtr?.read ? codecNamePtr.read() : \"N/A\";\n  \n        console.log(`  Codec: ${codecName}`);\n        // Asegúrate de que estos campos existan en el objeto que Zigar devuelve para VideoInfoPtr\n        console.log(`  Dimensiones: ${videoInfoPtr.width ?? 'N/A'}x${videoInfoPtr.height ?? 'N/A'}`);\n        console.log(`  Duración: ${videoInfoPtr.durationSeconds?.toFixed(2) ?? 'N/A'} segundos`);\n  \n        // Liberar la memoria de VideoInfo AHORA\n        freeVideoInfo(videoInfoPtr);\n        videoInfoPtr = null; // Resetear\n  \n    } else {\n        console.warn(\"getVideoInfo no devolvió ni información ni error.\");\n    }\n  \n    // 3. Transcodificar el archivo\n    console.log(`Iniciando transcodificación a ${outputFilePath} con opciones: ${transcodeOptions}`);\n    const transcodeResult: TranscodeResult = transcode(inputFilePath, outputFilePath, transcodeOptions);\n    errorMsgPtr = transcodeResult.message;\n  \n    if (transcodeResult.success) {\n      console.log(\"Transcodificación completada con éxito.\");\n      if (errorMsgPtr) {\n          const successMessage = errorMsgPtr.read ? errorMsgPtr.read() : \"(Mensaje adicional no legible)\";\n          console.log(`  Mensaje adicional: ${successMessage}`);\n          freeString(errorMsgPtr);\n          errorMsgPtr = null;\n      }\n    } else {\n      const errorMessage = errorMsgPtr?.read ? errorMsgPtr.read() : `Fallo en transcodificación (sin mensaje específico)`;\n      console.error(`Error en transcode: ${errorMessage}`);\n      if (errorMsgPtr) {\n          freeString(errorMsgPtr);\n          errorMsgPtr = null;\n      }\n    }\n  \n  } catch (e) {\n    console.error(\"Error inesperado durante la ejecución:\", e);\n  } finally {\n    // 4. Cerrar el contexto de entrada (MUY IMPORTANTE)\n    if (inputCtx) {\n      console.log(\"Cerrando contexto de entrada...\");\n      closeInput(inputCtx);\n      console.log(\"Contexto cerrado.\");\n      inputCtx = null;\n    }\n    // Asegurarse de liberar memoria pendiente\n    if (errorMsgPtr) {\n        console.warn(\"Liberando puntero de error pendiente en finally...\");\n        freeString(errorMsgPtr);\n    }\n    if (videoInfoPtr) { // Aunque debería ser null aquí, por seguridad\n         console.warn(\"Liberando puntero de VideoInfo pendiente en finally...\");\n         freeVideoInfo(videoInfoPtr);\n    }\n    console.log(\"Operaciones con FFmpeg finalizadas.\");\n  }"]}